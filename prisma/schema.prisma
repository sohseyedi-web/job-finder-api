generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  fullName      String
  email         String         @unique
  password      String
  role          Role           @default(USER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  applications  Application[]  @relation("UserApplications")
  jobs          Job[]          @relation("UserJobs")
  notifications Notification[] @relation("UserNotifications")
  profile       Profile?
  statusChanges StatusChange[] @relation("UserStatusChanges")
}

model Profile {
  id           String  @id @default(cuid())
  userId       String  @unique
  city         String?
  phoneNumber  String?
  jobTitle     String?
  resumeUrl    String?
  companyName  String?
  companyCity  String?
  address      String?
  companyPhone String?
  website      String?
  logoUrl      String?
  ownerPhone   String?
  user         User    @relation(fields: [userId], references: [id])
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  experience   String
  salary       String
  city         String
  jobType      String
  category     String
  ownerId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  expiresAt    DateTime      @default(now())
  isActive     Boolean       @default(false)
  applications Application[]
  owner        User          @relation("UserJobs", fields: [ownerId], references: [id])
}

model Application {
  id            String         @id @default(cuid())
  jobId         String
  userId        String
  fullName      String
  email         String
  resumeUrl     String
  status        Int            @default(0)
  createdAt     DateTime       @default(now())
  job           Job            @relation(fields: [jobId], references: [id])
  user          User           @relation("UserApplications", fields: [userId], references: [id])
  statusChanges StatusChange[] @relation("ApplicationStatusChanges")

  @@unique([jobId, userId])
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  recipientId String
  senderId    String
  senderName  String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  recipient   User             @relation("UserNotifications", fields: [recipientId], references: [id])
}

model StatusChange {
  id            String       @id @default(cuid())
  employeeId    String
  applicationId String?
  oldStatus     Int
  newStatus     Int
  message       String
  createdAt     DateTime     @default(now())
  application   Application? @relation("ApplicationStatusChanges", fields: [applicationId], references: [id])
  employee      User         @relation("UserStatusChanges", fields: [employeeId], references: [id])
}

enum Role {
  USER
  OWNER
  ADMIN
  EMPLOYEE
}

enum NotificationType {
  SYSTEM
  JOB
  TICKET
}
